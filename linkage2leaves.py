"""Linkage to Leaves

This snippet input a linkage matrix then output a  map form node index to its leaves

Author: CHEN junyi junyichen8-c@my.cityu.edu.hk

License: BSD 3 clause
"""

import numpy as np

def linkage_to_leaves(Z,data_size):
    """ Convert the linkage formated matrix to a dictionary, 
        key is a node number while values is a array of leaves of the node
    
    Parameters:
    ----------
    Z: 2-d numpy matrix, shape(n_merges, 4), float
        The linkage matrix that generated by See in scipy.cluster.hierarchy.linkage

    data_size: integer, _, _
        The size of the orignal dataset, the same as the total number of leaves in the likage tree (dendrogram)


    Return:
    ------
    node_to_leaves: dictionary, (node number, set of leaves), (integer, list(integer))
        A dictionary that can parse a integer node (indexed by a integer) in the linkage tree (dendrogram), to it corresponding leaf nodes.

    """
    node_id = data_size
    node_to_leaves = {}

    for merge in Z[:,:2].astype(int):
``
        # Both node have node id < number of node, the two merging nodes are leaves
        if(merge.max()< data_size):
            node_to_leaves[node_id] = []
            node_to_leaves[node_id].extend(merge)
        
        # One of the merging node (the one with small node index) is a leaf node
        elif(merge.min() < data_size):
        
            s,l = merge.min(),merge.max()
            node_to_leaves[node_id]= []
            node_to_leaves[node_id].extend(node_to_leaves[l])
            node_to_leaves[node_id].append(s)
        
        # Both nodes are internal nodes
        else:
            node_to_leaves[node_id]= []
            node_to_leaves[node_id].extend(node_to_leaves[merge[0]])
            node_to_leaves[node_id].extend(node_to_leaves[merge[1]])
    
        node_id = node_id + 1           
    
    return node_to_leaves 